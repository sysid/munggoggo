{"version":3,"sources":["Behaviour.js","Agent.js","AgentList.js","App.js","index.js"],"names":["Behaviour","props","behaviour","ws","is_online","useState","isToggleOn","setIsToggleOn","useEffect","state","Card","className","Row","Col","Button","variant","onClick","msg","originator","command","data","console","log","send","error","sendMessage","JSON","stringify","name","Spinner","animation","size","Agent","peer","behaviours","digest","md5","Header","Body","sm","Image","roundedCircle","src","alt","map","behav","index","key","AgentList","websocket","new_props","peers","Badge","Layout","children","Container","style","maxWidth","App","setIs_online","setWs","dataFromServer","setDataFromServer","timeout","connect","connectInterval","WebSocket","onopen","clearTimeout","onmessage","evt","message","parse","debug","onclose","e","Math","min","reason","setTimeout","check","onerror","err","close","readyState","CLOSED","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8a14691.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nimport PropTypes from 'prop-types';\nimport Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Behaviour = props => {\n    const {behaviour, ws, is_online} = props;\n    const [isToggleOn, setIsToggleOn] = useState(true);\n\n    useEffect(() => {\n        setIsToggleOn(behaviour.state !== \"running\");\n    }, []);\n\n    const sendMessage = (data) => {\n\n        // websockete can be null because of reconnect setup\n        try {\n            console.log(data); // catch error\n            ws.send(data) //send data to the server\n        } catch (error) {\n            console.error(error) // catch error\n        }\n    };\n\n    const handleClick = () => {\n        setIsToggleOn(!isToggleOn);\n        const msg = {\n            originator: behaviour,\n            command: isToggleOn ? \"Start\" : \"Stop\"\n        };\n        sendMessage(JSON.stringify(msg));\n    };\n\n    if (!is_online) {\n        return null;\n    }\n\n    return (\n        <Card className=\"behaviour mx-auto\">\n            <Row className={\"mx-auto\"}>\n                <Col>\n                    <Button\n                        variant={isToggleOn ? \"success\" : \"primary\"}\n                        onClick={handleClick}\n                    >\n                        {isToggleOn ? 'ON' : 'OFF'}\n                    </Button>\n                </Col>\n                <Col className={\"d-flex align-items-center\"}>\n                    {behaviour.name}\n                </Col>\n                <Col className={\"d-flex align-items-center\"}>\n                    {is_online && behaviour.state === \"running\" && <Spinner animation=\"grow\" size=\"sm\"/>}\n                </Col>\n            </Row>\n        </Card>\n    );\n};\n\nBehaviour.propTypes = {};\n\nexport default Behaviour;\n\n","import React from \"react\";\nimport md5 from \"blueimp-md5\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Behaviour from \"./Behaviour\";\n\nimport PropTypes from 'prop-types';\nimport Image from \"react-bootstrap/Image\";\nimport Card from \"react-bootstrap/Card\";\n\nconst Agent = props => {\n    const {peer} = props;\n    const behaviours = peer.behaviours;\n    const digest = md5(peer.name);\n    return (\n        <Card className={\"agent p-2\"}>\n            <Card.Header>{peer.name}</Card.Header>\n            <Card.Body>\n                <Row >\n                    <Col sm={3} >\n                        <Image roundedCircle src={`http://www.gravatar.com/avatar/${digest}?d=monsterid`} alt=\"Logo\"/>\n                    </Col>\n                    <Col className={\"d-flex align-items-center\"}>\n                        {typeof behaviours !== 'undefined' && behaviours.map((behav, index) =>\n                            <Behaviour behaviour={behav} key={index} {...props} />\n                        )}\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nAgent.propTypes = {};\n\nexport default Agent;\n","import React from 'react';\n\nimport Agent from \"./Agent\";\nimport Badge from \"react-bootstrap/Badge\";\n\nconst AgentList = props => {\n    const {websocket, is_online, data} = props; // websocket instance passed as props to the child component.\n    let new_props = {\n        ws: websocket,\n        is_online: is_online,\n        peers: (typeof data !== 'undefined') ? data['peers'] : []\n    };\n\n    return (\n        <div>\n            <h2>System is <Badge variant={is_online ? \"success\" : \"secondary\"}>{is_online ? \"online\" : \"offline\"}</Badge></h2>\n            {typeof new_props.peers !== 'undefined' && new_props.peers.map((peer, index) =>\n                <Agent key={index} peer={peer} {...new_props} />\n            )}\n        </div>\n    );\n};\n\nexport default AgentList;","import React, {useEffect, useState} from 'react';\nimport './index.css';\nimport AgentList from \"./AgentList\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nconst App = () => {\n    const [is_online, setIs_online] = useState(false);\n    const [ws, setWs] = useState(null);\n    const [dataFromServer, setDataFromServer] = useState();\n    let timeout = 250; // Initial timeout duration as a class variable\n    useEffect(() => {\n        connect();\n    }, []);\n\n    /**\n     * @function connect\n     * This function establishes the connect with the websocket\n     * and also ensures constant reconnection if connection closes\n     */\n    const connect = () => {\n        const ws = new WebSocket(\"ws://localhost:8000/ws\");\n        // let that = this; // cache the this\n        let connectInterval;\n\n        // websocket onopen event listener\n        ws.onopen = () => {\n            console.log(\"connected websocket main component\");\n\n            setWs(ws);\n            setIs_online(true);\n\n            timeout = 250; // reset timer to 250 on open of websocket connection\n            clearTimeout(connectInterval); // clear Interval on on open of websocket connection\n        };\n\n        ws.onmessage = evt => {\n            // listen to data sent from the websocket server\n            const message = JSON.parse(evt.data)\n            setDataFromServer(message);\n            console.debug(message)\n        };\n\n        // websocket onclose event listener\n        ws.onclose = e => {\n            setIs_online(false);\n            console.log(\n                `Socket is closed. Reconnect will be attempted in ${Math.min(\n                    10000 / 1000,\n                    (timeout + timeout) / 1000\n                )} second.`,\n                e.reason\n            );\n\n            timeout = timeout + timeout; //increment retry interval\n            connectInterval = setTimeout(check, Math.min(10000, timeout)); //call check function after timeout\n        };\n\n        // websocket onerror event listener\n        ws.onerror = err => {\n            setIs_online(false);\n            console.error(\n                \"Socket encountered error: \",\n                err.message,\n                \"Closing socket\"\n            );\n\n            ws.close();\n        };\n    };\n\n    /**\n     * utilited by the @function connect to check if the connection is close,\n     * if so attempts to reconnect\n     */\n    const check = () => {\n        if (!ws || ws.readyState == WebSocket.CLOSED) connect(); //check if websocket instance is closed, if so call `connect` function.\n    };\n\n    return (\n            <Layout className={\"App\"}>\n                <AgentList websocket={ws} data={dataFromServer} is_online={is_online}/>\n            </Layout>\n    );\n};\n\nconst Layout = ({ children }) => (\n    <Container>\n        <Col style={{ maxWidth: 550 }}>\n            <Row>\n                {children}\n            </Row>\n        </Col>\n    </Container>\n);\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}